package com.java6.asm.clothing_store.service.authentication.impl;

import com.java6.asm.clothing_store.exception.AppException;
import com.java6.asm.clothing_store.exception.ErrorCode;
import com.java6.asm.clothing_store.service.authentication.AccessTokenService;
import lombok.AllArgsConstructor;
import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;
import org.springframework.security.oauth2.jwt.*;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

@Service
@AllArgsConstructor
public class JwtAccessRefreshTokenService implements AccessTokenService {

    private final JwtEncoder jwtEncoder;

    private final JwtDecoder jwtDecoder;

    /**
     * üîë T·∫°o Access Token b·∫±ng RSA Private Key
     * - Th·ªùi gian s·ªëng: 5 ph√∫t
     * - Ch·ª©a th√¥ng tin user & role
     *
     * @param username T√™n user ƒë·ªÉ g√°n v√†o JWT
     * @return Chu·ªói Access Token ƒë√£ k√Ω
     */
    public String generateToken(String username) {
        Instant now = Instant.now();
        return jwtEncoder.encode(JwtEncoderParameters.from(
                JwsHeader.with(SignatureAlgorithm.RS256).build(),
                JwtClaimsSet.builder()
                        .subject(username) // Ai ƒëang ƒëƒÉng nh·∫≠p?
                        .issuedAt(now) // Th·ªùi ƒëi·ªÉm t·∫°o token
                        .expiresAt(now.plus(1, ChronoUnit.MINUTES)) // H·∫øt h·∫°n sau 5 ph√∫t
                        .claim("role", "ADMIN") // G√°n quy·ªÅn cho user
                        .build()
        )).getTokenValue();
    }

    @Override
    public String validateToken(String token) {
        try {
            Jwt decodedToken = jwtDecoder.decode(token); // üëà Decode token ƒë·ªÉ ki·ªÉm tra
            return decodedToken.getSubject(); // Tr·∫£ v·ªÅ username n·∫øu token h·ª£p l·ªá
        } catch (JwtException e) {
            throw new AppException(ErrorCode.ACCESS_TOKEN_INVALID);
        }
    }

}
