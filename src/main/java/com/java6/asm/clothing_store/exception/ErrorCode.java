package com.java6.asm.clothing_store.exception;

import lombok.Getter;
import org.springframework.http.HttpStatus;

@Getter
public enum ErrorCode {
    // üî• L·ªói li√™n quan ƒë·∫øn User
    USER_EXISTED(1001, "Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!", HttpStatus.CONFLICT),
    USER_NOT_EXISTED(1005, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND),
    EMAIL_INVALID(1003, "Email ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒëang tr·ªëng!", HttpStatus.BAD_REQUEST),
    PASSWORD_INVALID(1004, "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒëang tr·ªëng!", HttpStatus.BAD_REQUEST),
    UNAUTHENTICATED_EXCEPTION(1006, "L·ªói x√°c th·ª±c!", HttpStatus.UNAUTHORIZED),
    INVALID_CREDENTIALS(1007, "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!", HttpStatus.UNAUTHORIZED),
    UNAUTHORIZED(1009, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!", HttpStatus.FORBIDDEN),


    // üî• L·ªói li√™n quan ƒë·∫øn Token
    REFRESH_TOKEN_INVALID(2001, "Refresh Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", HttpStatus.UNAUTHORIZED),
    ACCESS_TOKEN_INVALID(2002, "Access Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", HttpStatus.UNAUTHORIZED),
    TOKEN_EXPIRED(2003, "Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!", HttpStatus.UNAUTHORIZED),
    TOKEN_MISSING(2004, "Kh√¥ng t√¨m th·∫•y Token!", HttpStatus.UNAUTHORIZED),
    TOO_MANY_DEVICES(2005, "Gi·ªõi h·∫°n ƒëƒÉng nh·∫≠p l√† 3 thi·∫øt b·ªã", HttpStatus.OK),

    // üî• L·ªói li√™n quan ƒë·∫øn S·∫£n ph·∫©m
    PRODUCT_NOT_EXISTED(3001, "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND),
    PRODUCT_ALREADY_EXISTED(3005, "S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i!", HttpStatus.CONFLICT),
    INVALID_QUANTITY(3002, "S·ªë l∆∞·ª£ng kh√¥ng ph√π h·ª£p ho·∫∑c h·∫øt h√†ng", HttpStatus.BAD_REQUEST),

    // üî• L·ªói li√™n quan ƒë·∫øn Danh m·ª•c
    CATEGORY_EXISTED(4001, "Danh m·ª•c ƒë√£ t·ªìn t·∫°i!", HttpStatus.CONFLICT),
    CATEGORY_NOT_EXISTED(4005, "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND),

    // üî• L·ªói li√™n quan ƒë·∫øn Gi·ªè h√†ng
    CART_ITEM_ALREADY_EXISTS(5001, "S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng!", HttpStatus.CONFLICT),
    CART_ITEM_NOT_FOUND(5002, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng!", HttpStatus.NOT_FOUND),
    INVALID_CART_ITEM(5003, "S·∫£n ph·∫©m trong gi·ªè h√†ng kh√¥ng h·ª£p l·ªá!", HttpStatus.BAD_REQUEST),
    CART_NOT_FOUND(5004, "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND),
    PRODUCT_NOT_FOUND(5005, "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND),

    // üî• L·ªói li√™n quan ƒë·∫øn ƒê∆°n h√†ng
    ORDER_NOT_FOUND(6001, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!", HttpStatus.NOT_FOUND),
    ORDER_ALREADY_EXISTED(6005, "ƒê∆°n h√†ng ƒë√£ t·ªìn t·∫°i!", HttpStatus.CONFLICT),
    ORDER_NOT_PENDING(6010, "Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω!", HttpStatus.CONFLICT),
    ORDER_NOT_PROCESSING(6020, "Ch·ªâ c√≥ th·ªÉ giao ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω!", HttpStatus.CONFLICT),
    ORDER_NOT_SHIPPING(6030, "Ch·ªâ c√≥ th·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng ƒëang v·∫≠n chuy·ªÉn!", HttpStatus.CONFLICT),
    ORDER_NOT_CANCEL(6040, "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ƒë√£ ho√†n t·∫•t!", HttpStatus.CONFLICT),

    // üî• L·ªói li√™n quan ƒë·∫øn ·∫¢nh ƒë·∫°i di·ªán
    AVATAR_NOT_PERMISSION(7001, "B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi kh√°c!", HttpStatus.FORBIDDEN),

    // üî• L·ªói h·ªá th·ªëng chung
    INVALID_KEY(8001, "Kh√≥a kh√¥ng h·ª£p l·ªá!", HttpStatus.BAD_REQUEST),
    INVALID_PARAMETER(8002, "Tham s·ªë kh√¥ng h·ª£p l·ªá!", HttpStatus.BAD_REQUEST),
    RESPONSE_NOT_FOUND(8003, "Kh√¥ng t√¨m th·∫•y ph·∫£n h·ªìi!", HttpStatus.NOT_FOUND),
    INVALID_REQUEST_BODY(8004, "D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá!", HttpStatus.BAD_REQUEST),
    CREATE_PAYMENT_FAILED(8005, "Thanh to√°n th·∫•t b·∫°i!", HttpStatus.INTERNAL_SERVER_ERROR),
    UNCATEGORIZED_EXCEPTION(9999, "L·ªói kh√¥ng x√°c ƒë·ªãnh!", HttpStatus.INTERNAL_SERVER_ERROR);



    private final int code;
    private final String message;
    private final HttpStatus httpStatus;

    ErrorCode(int code, String message, HttpStatus httpStatus) {
        this.code = code;
        this.message = message;
        this.httpStatus = httpStatus;
    }
}
